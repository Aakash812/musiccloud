package com.example.musicloud.persistence.hsqldb;

import com.example.musicloud.objects.Song;
import com.example.musicloud.persistence.SongPersistence;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class SongPersistenceHSQLDB implements SongPersistence {

    private final String TABLE_SONG = "table_song";
    private final String COLUMN_ID = "id";
    private final String COLUMN_SONG_NAME = "song_name";
    private final String COLUMN_ARTIST = "artist";
    private final String COLUMN_ALBUM_NAME = "album_name";
    private final String COLUMN_IS_LIKED = "is_liked";

    private final String dbPath;

    public SongPersistenceHSQLDB(final String dbPath) {
        this.dbPath = dbPath;
        try {
            final Connection c = connection();
            String createTableSql = String.format("CREATE TABLE IF NOT EXISTS %s (" + "%s INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100, INCREMENT BY 1) PRIMARY KEY, " + "%s VARCHAR(255), " + "%s  VARCHAR(255), " + "%s  VARCHAR(255), " + "%s INTEGER);", TABLE_SONG, COLUMN_ID, COLUMN_SONG_NAME, COLUMN_ARTIST, COLUMN_ALBUM_NAME, COLUMN_IS_LIKED);
            Statement st = c.createStatement();
            st.executeUpdate(createTableSql);
            final ResultSet rs = st.executeQuery(String.format("SELECT * FROM %s", TABLE_SONG));
            if (!rs.next()) {
                String sqlStartStr = String.format("%s(%s, %s, %s, %s)", TABLE_SONG, COLUMN_SONG_NAME, COLUMN_ARTIST, COLUMN_ALBUM_NAME, COLUMN_IS_LIKED);
                st.executeUpdate(String.format("INSERT INTO %s VALUES ('Faded', 'Alan Walker', 'Alan Walker-Faded', 0);", sqlStartStr));
                st.executeUpdate(String.format("INSERT INTO %s VALUES ('Rain Man', 'Ketsa', 'Ketsa - Rain Man', 0);", sqlStartStr));
                st.executeUpdate(String.format("INSERT INTO %s VALUES ('Don''t Cry', 'Guns N'' Roses', 'Guns N'' Roses-Don''t Cry', 0);", sqlStartStr));
                st.executeUpdate(String.format("INSERT INTO %s VALUES ('Not Enough To Give', 'Ketsa', 'Ketsa - Not Enough To Give', 0);", sqlStartStr));
                st.executeUpdate(String.format("INSERT INTO %s VALUES ('So Far Away', 'Martin Garrix&David Guetta&Jamie Scott&Romy Dya', 'Martin Garrix&David Guetta&Jamie Scott&Romy Dya-So Far Away', 0);", sqlStartStr));
                st.executeUpdate(String.format("INSERT INTO %s VALUES ('That Girl', 'Olly Murs', 'Olly Murs-That Girl', 0);", sqlStartStr));
                st.executeUpdate(String.format("INSERT INTO %s VALUES ('Above the Clouds', 'Scott Holmes Music', 'Scott Holmes Music - Above the Clouds', 0);", sqlStartStr));
                st.executeUpdate(String.format("INSERT INTO %s VALUES ('Nightfall', 'Stereohada', 'Stereohada - Nightfall', 0);", sqlStartStr));
                st.executeUpdate(String.format("INSERT INTO %s VALUES ('Normal No More(Explicit)', 'Tysm', 'Tysm-Normal No More(Explicit)', 0);", sqlStartStr));
            }
            rs.close();
            st.close();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    private Connection connection() throws SQLException {
        return DriverManager.getConnection(String.format("jdbc:hsqldb:file:%s;shutdown=true", dbPath), "SA", "");
    }

    @Override
    public List<Song> getAllSongs() {
        final List<Song> songList = new ArrayList<>();
        try (final Connection c = connection()) {
            final Statement st = c.createStatement();
            final ResultSet rs = st.executeQuery(String.format("SELECT * FROM %s", TABLE_SONG));
            while (rs.next()) {
                final Song song = fromResultSet(rs);
                songList.add(song);
            }
            rs.close();
            st.close();
            return songList;
        } catch (final SQLException e) {
            throw new RuntimeException(e);
        }
    }

    private Song fromResultSet(final ResultSet rs) throws SQLException {
        return new Song(rs.getInt(COLUMN_ID), rs.getString(COLUMN_SONG_NAME), rs.getString(COLUMN_ARTIST), rs.getString(COLUMN_ALBUM_NAME), rs.getInt(COLUMN_IS_LIKED) == 1);
    }

    @Override
    public Song getSong(int i) {
        return null;
    }

    @Override
    public int getSize() {
        return 0;
    }

    @Override
    public Song insertSong(Song currentSong) {
        try (final Connection c = connection()) {
            final PreparedStatement st = c.prepareStatement(String.format("INSERT INTO %s(%s, %s, %s, %s)  VALUES(?, ?, ?, ?)", TABLE_SONG, COLUMN_SONG_NAME, COLUMN_ARTIST, COLUMN_ALBUM_NAME, COLUMN_IS_LIKED));
            st.setString(1, currentSong.getSongName());
            st.setString(2, currentSong.getArtist());
            st.setString(3, currentSong.getAlbumName());
            st.setInt(4, currentSong.isLiked() ? 1 : 0);
            st.executeUpdate();
            st.close();
            return currentSong;
        } catch (final SQLException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public Song updateSong(Song currentSong) {
        try (final Connection c = connection()) {
            final PreparedStatement st = c.prepareStatement(String.format("UPDATE %s SET %s = ?, %s = ?, %s = ?, %s = ?", TABLE_SONG, COLUMN_SONG_NAME, COLUMN_ARTIST, COLUMN_ALBUM_NAME, COLUMN_IS_LIKED));
            st.setString(1, currentSong.getSongName());
            st.setString(2, currentSong.getArtist());
            st.setString(3, currentSong.getAlbumName());
            st.setInt(4, currentSong.isLiked() ? 1 : 0);
            st.executeUpdate();
            st.close();
            return currentSong;
        } catch (final SQLException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void deleteSong(Song currentSong) {
        try (final Connection c = connection()) {
            final PreparedStatement st = c.prepareStatement(String.format("DELETE FROM %s WHERE %s = ?", TABLE_SONG, COLUMN_ID));
            st.setInt(1, currentSong.getId());
            st.executeUpdate();
            st.close();
        } catch (final SQLException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public List<String> allSongNames() {
        final List<String> songNameList = new ArrayList<>();
        try (final Connection c = connection()) {
            final PreparedStatement st = c.prepareStatement(String.format("SELECT %s FROM %s", COLUMN_SONG_NAME, TABLE_SONG));
            final ResultSet rs = st.executeQuery();
            while (rs.next()) {
                songNameList.add(rs.getString(COLUMN_SONG_NAME));
            }
            rs.close();
            st.close();
            return songNameList;
        } catch (final SQLException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void likeSong(Song currentSong) {

    }

    @Override
    public void unlikeSong(Song currentSong) {

    }

    @Override
    public boolean isLiked(Song currentSong) {
        return false;
    }

    @Override
    public List<Song> getLikedSongs() {
        return null;
    }
}
